namespace LuisBot
{

    using System;
    using System.Diagnostics;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Web.Http;
    using Autofac;
    using LuisBot.Translator;
    using Microsoft.Bot.Builder.Dialogs;
    using Microsoft.Bot.Builder.Dialogs.Internals;
    using Microsoft.Bot.Connector;
    using LuisBot.Extensions;
    using LuisBot.Models;
    using LuisBot.Utilities;
    using LuisBot.Dialogs;
    using LuisBot.Services;
    using System.Web.Configuration;
    using LuisBot.ServicesFolder;
    using System.Web;
    using System.IO;
    using System.Net.Http.Headers;

    [BotAuthentication]
    public class MessagesController : ApiController
    {
        private static readonly bool IsSpellCorrectionEnabled = bool.Parse(WebConfigurationManager.AppSettings["IsSpellCorrectionEnabled"]);

        private readonly BingSpellCheckService spellService = new BingSpellCheckService();

        private readonly MicrosoftCognitiveSpeechService speechService = new MicrosoftCognitiveSpeechService();



        /// <summary>
        /// POST: api/Messages
        /// Receive a message from a user and reply to it
        /// </summary>
        public async Task<HttpResponseMessage> Post([FromBody]Activity activity)
        {
            //  Trace.TraceInformation($"Incoming Activity is {activity.ToJson()}");
            if (activity.Type == ActivityTypes.Message)
            {
              /*  var connector = new ConnectorClient(new Uri(activity.ServiceUrl));
                string message;
                try
                {
                    var audioAttachment = activity.Attachments?.FirstOrDefault(a => a.ContentType.Equals("audio/wave") || a.ContentType.Equals("application/octet-stream"));
                    if (audioAttachment != null)
                    {
                        var stream = await GetAudioStream(connector, audioAttachment);
                        var text = await this.speechService.GetTextFromAudioAsync(stream);
                        message = ProcessText(text);
                    }
                    else
                    {
                        message = "Did you upload Audio file?";
                    }
                }
                catch (Exception e)
                {
                    message = "Oops! Something went wrong. Try again later";
                    if (e is HttpException)
                    {
                        var httpCode = (e as HttpException).GetHttpCode();
                        if (httpCode == 401 || httpCode == 403)
                        {
                            message += $" [{e.Message} - hint: check your API KEY at web.config]";
                        }
                        else if (httpCode == 408)
                        {
                            message += $" [{e.Message} - hint: try send an audio shorter than 15 segs]";
                        }
                    }

                    Trace.TraceError(e.ToString());
                }

                Activity reply = activity.CreateReply(message);
                await Conversation.SendAsync(activity, () => new RootLuisDialog());
            }
            else
            {
                HandleSystemMessage(activity);
            }

            var response = this.Request.CreateResponse(HttpStatusCode.OK);
            return response;*/
        }
        /* if(!String.IsNullOrEmpty(activity.Text))
         {
             //detect language of input text

             var userLanguage = TranslationHandler.DetectLanguage(activity);

             // save userÂ´s languagecode 
             var message = activity as IMessageActivity;

             try
             {
                 using (var scope = DialogModule.BeginLifetimeScope(Conversation.Container, message))
                 {
                     var botDataStore = scope.Resolve<IBotDataStore<BotData>>();

                     var key = new AddressKey()
                     {
                         BotId = message.Recipient.Id,
                         ChannelId = message.ChannelId,
                         UserId = message.From.Id,
                         ConversationId = message.Conversation.Id,
                         ServiceUrl = message.ServiceUrl
                     };

                     var userData = await botDataStore.LoadAsync(key, BotStoreType.BotUserData, CancellationToken.None);

                     var storedLanguageCode = userData.GetProperty<string>(StringConstants.UserLanguageKey);


                     //update user's language in Azure Table Storage
                     if (storedLanguageCode != userLanguage)
                     {
                         userData.SetProperty(StringConstants.UserLanguageKey, userLanguage);
                         await botDataStore.SaveAsync(key, BotStoreType.BotUserData, userData, CancellationToken.None);
                         await botDataStore.FlushAsync(key, CancellationToken.None);
                     }
                 }
             }
             catch (Exception ex)
             {
                 throw ex;
             }
             //translate activity.Text to Spanish before sending to LUIS for intent
             activity.Text = TranslationHandler.TranslateTextToDefaultLanguage(activity, userLanguage);
         //   activity.Text = TranslationHandler.TranslateText(String ,"es",userLanguage);
             await Conversation.SendAsync(activity, MakeRoot);
         }

     }
     else
             {
                 HandleSystemMessage(activity);
             }
             var response = Request.CreateResponse(HttpStatusCode.OK);
             return response;
         }

 internal static IDialog<object> MakeRoot()
 {
     try
     {
         return Chain.From(() => new RootLuisDialog());
     }
     catch (Exception ex)
     {
         throw ex;
     }

 }*/

        //  var userLanguage = TranslationHandler.DetectLanguage(activity);
        // activity.Text = TranslationHandler.TranslateTextToDefaultLanguage(activity,userLanguage);

      if (IsSpellCorrectionEnabled)
                 {
                     try
                     {

                         activity.Text = await this.spellService.GetCorrectedTextAsync(activity.Text);
                     }
                     catch (Exception ex)
                     {
                         Trace.TraceError(ex.ToString());
                     }
                 }

                 await Conversation.SendAsync(activity, () => new RootLuisDialog());
             }
             else
             {
                 this.HandleSystemMessage(activity);
             }

             var response = Request.CreateResponse(HttpStatusCode.OK);
             return response;
         }
     
        /*  private static string ProcessText(string text)
          {
              string message = "You said : " + text + ".";

              if (!string.IsNullOrEmpty(text))
              {
                  var wordCount = text.Split(' ').Count(x => !string.IsNullOrEmpty(x));
                  message += "\n\nWord Count: " + wordCount;

                  var characterCount = text.Count(c => c != ' ');
                  message += "\n\nCharacter Count: " + characterCount;

                  var spaceCount = text.Count(c => c == ' ');
                  message += "\n\nSpace Count: " + spaceCount;

                  var vowelCount = text.ToUpper().Count("AEIOU".Contains);
                  message += "\n\nVowel Count: " + vowelCount;
              }

              return message;
          }
          private static async Task<Stream> GetAudioStream(ConnectorClient connector, Attachment audioAttachment)
          {
              using (var httpClient = new HttpClient())
              {
                  // The Skype attachment URLs are secured by JwtToken,
                  // you should set the JwtToken of your bot as the authorization header for the GET request your bot initiates to fetch the image.
                  // https://github.com/Microsoft/BotBuilder/issues/662
                  var uri = new Uri(audioAttachment.ContentUrl);
                  if (uri.Host.EndsWith("skype.com") && uri.Scheme == "https")
                  {
                      httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await GetTokenAsync(connector));
                      httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/octet-stream"));
                  }

                  return await httpClient.GetStreamAsync(uri);
              }
          }
          /// <summary>
          /// Gets the JwT token of the bot. 
          /// </summary>
          /// <param name="connector"></param>
          /// <returns>JwT token of the bot</returns>
          private static async Task<string> GetTokenAsync(ConnectorClient connector)
          {
              var credentials = connector.Credentials as MicrosoftAppCredentials;
              if (credentials != null)
              {
                  return await credentials.GetTokenAsync();
              }

              return null;
          }
          */
        private Act HandleSystemMessage(Activity message)
        {
            if (message.Type == ActivityTypes.DeleteUserData)
            {
                // Implement user deletion here
                // If we handle user deletion, return a real message
            }
            else if (message.Type == ActivityTypes.ConversationUpdate)
            {

                /*if (message.MembersAdded.Any(o => o.Id == message.Recipient.Id))
                {
                    ConnectorClient connector = new ConnectorClient(new Uri(message.ServiceUrl));
                    Activity reply = message.CreateReply("Son las 12:30. Recuerda que dentro de 1 hora, a las 13:30 tienes una reserva en el Restaurante del Hotel.");
                    connector.Conversations.ReplyToActivityAsync(reply);
                }*/
                if (message.MembersAdded.Any(o => o.Id == message.Recipient.Id))
                {
                    ConnectorClient connector = new ConnectorClient(new Uri(message.ServiceUrl));
                    Activity reply = message.CreateReply("Bienvenido al ChatBot de Suitech!! ");
                    connector.Conversations.ReplyToActivityAsync(reply);
                }


                else if (message.Type == ActivityTypes.ContactRelationUpdate)
                {
                    // Handle add/remove from contact lists
                    // Activity.From + Activity.Action represent what happened
                }
                else if (message.Type == ActivityTypes.Typing)
                {
                    // Handle knowing tha the user is typing
                }
                else if (message.Type == ActivityTypes.Ping)
                {
                }

                return null;
            }
        }
    }
}
/// <summary>
/// Handles the system activity.
/// </summary>
/// <param name="activity">The activity.</param>
/// <returns>Activity</returns>
/*private async Task<Activity> HandleSystemMessage(Activity activity)
{
   switch (activity.Type)
   {
       case ActivityTypes.DeleteUserData:
           // Implement user deletion here
           // If we handle user deletion, return a real message
           break;
       case ActivityTypes.ConversationUpdate:
           // Greet the user the first time the bot is added to a conversation.
           if (activity.MembersAdded.Any(m => m.Id == activity.Recipient.Id))
           {
               var connector = new ConnectorClient(new Uri(activity.ServiceUrl));

               var response = activity.CreateReply();
               response.Text = "Hi! I am SpeechToText Bot. I can understand the content of any audio and convert it to text. Try sending me a wav file.";

               await connector.Conversations.ReplyToActivityAsync(response);
           }

           break;
       case ActivityTypes.ContactRelationUpdate:
           // Handle add/remove from contact lists
           break;
       case ActivityTypes.Typing:
           // Handle knowing that the user is typing
           break;
       case ActivityTypes.Ping:
           break;
   }

   return null;
}
}
}
*/